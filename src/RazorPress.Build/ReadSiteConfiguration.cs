using System;
using System.Composition;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using MefBuild;
using RazorEngine.Configuration;
using RazorEngine.Templating;

namespace RazorPress.Build
{
    /// <summary>
    /// Reads site <see cref="Configuration"/> from a configuration template file.
    /// </summary>
    [Shared, Export]
    public class ReadSiteConfiguration : Command
    {
        private FileInfo configurationFile = new FileInfo("Site.csconfig");

        /// <summary>
        /// Gets or sets the site <see cref="Configuration"/> object.
        /// </summary>
        [Import]
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Gets or sets the configuration file.
        /// </summary>
        public FileInfo ConfigurationFile 
        {
            get { return this.configurationFile; }
            set { Property.Set(ref this.configurationFile, value); }
        }

        /// <summary>
        /// Compiles the <see cref="ConfigurationFile"/> template and executes it to update the <see cref="Configuration"/>.
        /// </summary>
        public override void Execute()
        {
            base.Execute();

            Property.Require(this.Configuration, "Configuration");

            if (this.ConfigurationFile.Exists)
            {
                string templateText = File.ReadAllText(this.ConfigurationFile.FullName);
                ConfigurationTemplate template = CreateConfigurationTemplate(templateText);
                this.Configuration.Update(template);
                template.Execute();
                template.Update(this.Configuration);
            }
        }

        private static ConfigurationTemplate CreateConfigurationTemplate(string templateText)
        {
            var serviceConfiguration = new TemplateServiceConfiguration();
            serviceConfiguration.BaseTemplateType = typeof(ConfigurationTemplate);
            serviceConfiguration.Namespaces.Add("System.IO");

            using (var templateService = new TemplateService(serviceConfiguration))
            {
                Type generatedType = templateService.CreateTemplateType(templateText, null);
                return (ConfigurationTemplate)Activator.CreateInstance(generatedType);
            }
        }

        /// <summary>
        /// Serves as a base class for Razor template compiled from contents of a configuration file.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible", Justification = "Serves as base for classes generated by Razor in dynamic assemblies and must be public.")]
        public abstract class ConfigurationTemplate : Configuration
        {
            /// <summary>
            /// Executes configuration code.
            /// </summary>
            public abstract void Execute();
        }
    }
}
